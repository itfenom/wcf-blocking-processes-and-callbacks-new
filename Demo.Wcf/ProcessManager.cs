using Demo.Contracts;
using System;
using System.Collections.Generic;
using System.ServiceModel;
using System.Threading;

namespace Demo.Wcf
{
    [ServiceBehavior(ConcurrencyMode = ConcurrencyMode.Reentrant)]
    public class ProcessManager : IProcess
    {
        private List<int> list = new List<int>();

        public void StartProcess()
        {
            var rnd = new Random(100000);

            var cancel = false;

            for (var i = 0; i < 100; i++)
            {
                var gen = rnd.Next();
                this.list.Add(gen);
                Console.WriteLine("Generated by the service: {0}", gen);

                var callback = OperationContext.Current.GetCallbackChannel<IProcessCallback>();
                if (callback != null)
                {
                    try
                    {
                        cancel = callback.ReportBack(gen);
                    }
                    catch (CommunicationException ex)
                    {
                        cancel = true;
                    }
                }

                if (!cancel)
                {
                    Thread.Sleep(1500);
                }
                else
                {
                    break;
                }               
            }
        }
    }
}
